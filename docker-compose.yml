version: '3.8'

services:
  loglens:
    build: .
    container_name: loglens-detector
    ports:
      - "8080:8080"  # Main application
      - "8000:8000"  # Prometheus metrics
    volumes:
      - ./logs:/app/logs:ro  # Mount log directory (read-only)
      - ./data:/app/data     # Data directory for models and datasets
      - ./models:/app/models # Models directory
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
    restart: unless-stopped
    networks:
      - loglens-network

  prometheus:
    image: prom/prometheus:latest
    container_name: loglens-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - loglens-network

  grafana:
    image: grafana/grafana:latest
    container_name: loglens-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    restart: unless-stopped
    networks:
      - loglens-network

  # Log generator for testing
  log-generator:
    build:
      context: .
      dockerfile: Dockerfile.log-generator
    container_name: loglens-log-generator
    volumes:
      - ./logs:/app/logs
    environment:
      - PYTHONPATH=/app
    restart: unless-stopped
    networks:
      - loglens-network
    depends_on:
      - loglens

volumes:
  grafana-storage:

networks:
  loglens-network:
    driver: bridge